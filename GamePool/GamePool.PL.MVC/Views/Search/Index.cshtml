@model SearchResultsVM

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles {
    <link href="~/Content/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/select2-bootstrap.css" rel="stylesheet" />
}

@section scripts {
    <script>
        var CFG = CFG || {},
            i;

        @if (Model.Parameters.GenreIds != null)
        {
            @:CFG.genreIds = [];

            foreach (var genreId in Model.Parameters.GenreIds)
            {
                @:CFG.genreIds.push(@genreId);
            }
        }

        CFG.action = "@Request.RawUrl";
    </script>
    <script src="~/Scripts/select2.min.js"></script>
    <script src="~/Scripts/Include/predicate-input.js"></script>
    <script src="~/Scripts/Include/common.js"></script>
}

<div class="container mt-100 pb-100">
    <div class="jumbotron">
        <h3>Advanced search</h3>

        @using (Html.BeginForm("Index", "Search", FormMethod.Get, new { @class = "form-horizontal" }))
        {
            <input type="hidden" id="Parameters.PageNumber" name="Parameters.PageNumber" value="1">
            <div class="row mt-20">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Parameters.Name)
                    @Html.EditorFor(model => model.Parameters.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Name:" } })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Parameters.PriceFrom)
                    @Html.EditorFor(model => model.Parameters.PriceFrom, new { htmlAttributes = new { @class = "form-control", placeholder = "Price from:" } })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Parameters.PriceTo)
                    @Html.EditorFor(model => model.Parameters.PriceTo, new { htmlAttributes = new { @class = "form-control", placeholder = "Price to:" } })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Parameters.ReleaseDate)
                    <input type="date" id="Parameters.ReleaseDate" name="Parameters.ReleaseDate" class="form-control" />
                </div>
            </div>

            <div class="row mt-20">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Parameters.GenreIds)
                    @Html.DropDownListFor(model => model.Parameters.GenreIds, Enumerable.Empty<SelectListItem>(), new { @class = "form-control genres-input", multiple = "multiple"})
                </div>
            </div>

            <div class="row mt-40">
                <div class="col-md-3">
                    <button type="submit" class="btn btn-block btn-info">Search</button>
                </div>
            </div>
        }
    </div>

    @{
        int rowCount = 0;
    }

    @foreach (var game in Model.Items.Data)
    {
        if (rowCount == 0)
        {
            @Html.Raw("<div class=\"row\">");
        }

        <div class="col-lg-3" data-id="@game.Id">
            <a href="@Url.Action("Details", "Product", new { id = game.Id })">
                <h3>@game.Name</h3>
                <img src="http://placehold.it/250x250" class="thumbnail" alt="Alternate Text" />
                <p>@game.Description</p>
            </a>
            <button type="button" class="btn btn-default center-block">Buy</button>
        </div>

        rowCount++;

        if (rowCount == 4)
        {
            @Html.Raw("</div>")

            rowCount = 0;
        }
    }

    @if (rowCount != 4 && rowCount != 0)
    {
        @Html.Raw("</div>")
    }

    @{
        int difference = Model.Items.MaxPageSelectors - Model.Items.TotalPages;
        int count = (difference < 0) ? Model.Items.MaxPageSelectors : Model.Items.TotalPages;

        int startIndex;

        if (Model.Items.TotalPages > Model.Items.MaxPageSelectors)
        {
            int rightDifference = Model.Items.TotalPages - Model.Items.CurrentPage;
            int middle = Model.Items.MaxPageSelectors / 2;
            if (Model.Items.CurrentPage < middle)
            {
                startIndex = 1;
            }
            else if (rightDifference < middle)
            {
                startIndex = Model.Items.TotalPages - Model.Items.MaxPageSelectors + 1;
            }
            else
            {
                startIndex = Model.Items.CurrentPage - middle;
            }
        }
        else
        {
            startIndex = 1;
        }
    }
    <div class="row text-center">
        @if (Model.Items.TotalPages > 0)
        {
            <ul class="pagination">
                <li><a class="page-link" data-page="1"><<</a></li>
                @for (int i = 0; i < count; i++, startIndex++)
                {
                    if (startIndex == Model.Items.CurrentPage)
                    {
                        <li class="active"><a class="page-link" data-page="@startIndex">@startIndex</a></li>
                    }
                    else
                    {
                        <li><a class="page-link" data-page="@startIndex">@startIndex</a></li>
                    }
                }
                <li><a class="page-link" data-page="@Model.Items.TotalPages">>></a></li>
            </ul>
        }
    </div>
</div>

